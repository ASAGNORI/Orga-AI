#!/bin/bash

# Script para verificar a sa√∫de dos servi√ßos do Orga AI Project

# Logging function
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# Error handling
handle_error() {
    log "‚ùå Error occurred in script at line $1"
    exit 1
}

trap 'handle_error $LINENO' ERR

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Check parameters
SERVICE="all"
if [ "$1" != "" ]; then
    SERVICE=$1
fi

log "üîç Verificando sa√∫de dos servi√ßos: ${SERVICE}"

# Verificar se o Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    log "${RED}‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro.${NC}"
    exit 1
fi

# Check if docker-compose exists
if ! command -v docker compose &> /dev/null; then
    log "${RED}‚ùå Docker Compose n√£o est√° instalado ou n√£o est√° no PATH.${NC}"
    exit 1
fi

# Verificar se o Ollama est√° rodando e saud√°vel
check_ollama() {
    log "üß† Verificando servi√ßo Ollama..."
    if ! docker compose ps | grep -q "ollama.*Up"; then
        log "${RED}‚ùå Ollama n√£o est√° rodando. Iniciando Ollama...${NC}"
        docker compose up -d ollama
        sleep 5
    fi

    # Verificar se o Ollama est√° respondendo
    max_attempts=10
    attempt=1
    ollama_ready=false

    while [ $attempt -le $max_attempts ] && [ "$ollama_ready" = false ]; do
        log "üîÑ Testando conex√£o com Ollama (tentativa $attempt de $max_attempts)..."
        if docker compose exec ollama curl -s -f http://localhost:11435/api/tags > /dev/null 2>&1; then
            ollama_ready=true
            log "${GREEN}‚úÖ Ollama est√° respondendo corretamente!${NC}"
        else
            log "${YELLOW}‚è≥ Ollama n√£o est√° pronto ainda. Aguardando 5 segundos...${NC}"
            sleep 5
            attempt=$((attempt+1))
        fi
    done

    if [ "$ollama_ready" = false ]; then
        log "${RED}‚ùå Ollama n√£o est√° respondendo ap√≥s v√°rias tentativas. Verifique os logs:${NC}"
        docker compose logs ollama
        return 1
    fi

    # Verificar se o modelo LLama3 est√° dispon√≠vel
    log "ü§ñ Verificando disponibilidade do modelo llama3:8b..."
    model_output=$(docker compose exec ollama ollama list 2>/dev/null || echo "")
    
    if echo "$model_output" | grep -q "llama3"; then
        log "${GREEN}‚úÖ Modelo llama3:8b est√° instalado!${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è Modelo llama3:8b n√£o detectado. Iniciando download...${NC}"
        docker compose exec -d ollama ollama pull llama3:8b
        log "${YELLOW}‚è≥ Download do modelo iniciado em segundo plano. Este processo pode levar alguns minutos.${NC}"
        log "${YELLOW}‚è≥ Voc√™ pode verificar o progresso com 'docker compose logs ollama'.${NC}"
        # N√£o esperaremos o download terminar, apenas avisamos o usu√°rio
    fi
    
    return 0
}

# Verificar se o Banco de Dados est√° rodando e saud√°vel
check_database() {
    log "üõ¢Ô∏è Verificando servi√ßo de banco de dados..."
    if ! docker compose ps | grep -q "db.*Up"; then
        log "${RED}‚ùå Banco de dados n√£o est√° rodando. Iniciando banco de dados...${NC}"
        docker compose up -d db
        sleep 5
    fi

    # Verificar se o Banco de Dados est√° respondendo
    max_attempts=5
    attempt=1
    db_ready=false

    while [ $attempt -le $max_attempts ] && [ "$db_ready" = false ]; do
        log "üîÑ Testando conex√£o com banco de dados (tentativa $attempt de $max_attempts)..."
        if docker compose exec db pg_isready -U postgres > /dev/null 2>&1; then
            db_ready=true
            log "${GREEN}‚úÖ Banco de dados est√° respondendo corretamente!${NC}"
        else
            log "${YELLOW}‚è≥ Banco de dados n√£o est√° pronto ainda. Aguardando 3 segundos...${NC}"
            sleep 3
            attempt=$((attempt+1))
        fi
    done

    if [ "$db_ready" = false ]; then
        log "${RED}‚ùå Banco de dados n√£o est√° respondendo ap√≥s v√°rias tentativas. Verifique os logs:${NC}"
        docker compose logs db
        return 1
    fi
    
    return 0
}

# Verificar se o Backend est√° rodando e saud√°vel
check_backend() {
    log "üîß Verificando servi√ßo de API Backend..."
    if ! docker compose ps | grep -q "backend.*Up"; then
        log "${RED}‚ùå Backend n√£o est√° rodando. Iniciando backend...${NC}"
        docker compose up -d backend
        sleep 5
    fi

    # Verificar se o Backend est√° respondendo
    max_attempts=5
    attempt=1
    backend_ready=false

    while [ $attempt -le $max_attempts ] && [ "$backend_ready" = false ]; do
        log "üîÑ Testando conex√£o com backend (tentativa $attempt de $max_attempts)..."
        if curl -s -f http://localhost:8000/api/v1/health > /dev/null 2>&1; then
            backend_ready=true
            log "${GREEN}‚úÖ Backend est√° respondendo corretamente!${NC}"
        else
            log "${YELLOW}‚è≥ Backend n√£o est√° pronto ainda. Aguardando 3 segundos...${NC}"
            sleep 3
            attempt=$((attempt+1))
        fi
    done

    if [ "$backend_ready" = false ]; then
        log "${RED}‚ùå Backend n√£o est√° respondendo ap√≥s v√°rias tentativas. Verifique os logs:${NC}"
        docker compose logs backend
        return 1
    fi
    
    return 0
}

# Verificar se o Frontend est√° rodando e saud√°vel
check_frontend() {
    log "üñ•Ô∏è Verificando servi√ßo Frontend..."
    if ! docker compose ps | grep -q "frontend.*Up"; then
        log "${RED}‚ùå Frontend n√£o est√° rodando. Iniciando frontend...${NC}"
        docker compose up -d frontend
        sleep 5
    fi

    # Verificar se o Frontend est√° respondendo
    max_attempts=5
    attempt=1
    frontend_ready=false

    while [ $attempt -le $max_attempts ] && [ "$frontend_ready" = false ]; do
        log "üîÑ Testando conex√£o com frontend (tentativa $attempt de $max_attempts)..."
        if curl -s -f http://localhost:3000 > /dev/null 2>&1; then
            frontend_ready=true
            log "${GREEN}‚úÖ Frontend est√° respondendo corretamente!${NC}"
        else
            log "${YELLOW}‚è≥ Frontend n√£o est√° pronto ainda. Aguardando 3 segundos...${NC}"
            sleep 3
            attempt=$((attempt+1))
        fi
    done

    if [ "$frontend_ready" = false ]; then
        log "${YELLOW}‚ö†Ô∏è Frontend pode n√£o estar pronto ainda. Verifique os logs:${NC}"
        docker compose logs frontend
        return 1
    fi
    
    return 0
}

# Testar p√°ginas do Frontend
check_frontend_pages() {
    log "üï∏Ô∏è Testando rotas do Frontend..."
    local routes=("/" "/login" "/register" "/dashboard")
    local err=0
    for route in "${routes[@]}"; do
        if curl -s -f http://localhost:3000${route} > /dev/null; then
            log "${GREEN}‚úÖ Frontend rota ${route} OK${NC}"
        else
            log "${RED}‚ùå Frontend rota ${route} falhou${NC}"
            err=1
        fi
    done
    return $err
}

# Fun√ß√£o principal de verifica√ß√£o
check_services() {
    status_all=0

    if [ "$SERVICE" = "all" ] || [ "$SERVICE" = "ollama" ]; then
        check_ollama
        status_ollama=$?
        status_all=$((status_all + status_ollama))
    fi

    if [ "$SERVICE" = "all" ] || [ "$SERVICE" = "db" ]; then
        check_database
        status_db=$?
        status_all=$((status_all + status_db))
    fi

    if [ "$SERVICE" = "all" ] || [ "$SERVICE" = "backend" ]; then
        check_backend
        status_backend=$?
        status_all=$((status_all + status_backend))
    fi

    if [ "$SERVICE" = "all" ] || [ "$SERVICE" = "frontend" ]; then
        check_frontend
        status_frontend=$?
        check_frontend_pages
        status_frontend_pages=$?
        status_all=$((status_all + status_frontend + status_frontend_pages))
    fi

    if [ $status_all -eq 0 ]; then
        log "${GREEN}‚úÖ Todos os servi√ßos verificados est√£o saud√°veis!${NC}"
        return 0
    else
        log "${RED}‚ùå Alguns servi√ßos n√£o est√£o saud√°veis. Verifique os logs acima.${NC}"
        return 1
    fi
}

# Execute a verifica√ß√£o
check_services
exit_code=$?

log "üèÅ Verifica√ß√£o de sa√∫de conclu√≠da com status: $exit_code"
exit $exit_code
